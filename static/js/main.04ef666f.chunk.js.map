{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ffmpeg","createFFmpeg","log","App","ready","setReady","useState","video","setVideo","gif","setGif","useEffect","load","_jsxs","className","children","_jsx","controls","width","src","URL","createObjectURL","type","onChange","e","_e$target$files","target","files","item","onClick","async","FS","fetchFile","run","data","url","Blob","buffer","alt","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"sPAKA,MAAMA,EAASC,uBAAa,CAAEC,KAAK,IA+DpBC,MA7Df,WACE,MAAOC,EAAOC,GAAYC,oBAAS,IAC5BC,EAAOC,GAAYF,sBACnBG,EAAKC,GAAUJ,qBA+BtB,OAnBAK,qBAAU,KAJTX,EAAOY,OACNP,GAAS,EAIH,GACL,IAiBID,EAELS,eAAA,OAAKC,UAAU,MAAKC,SAAA,CAChBR,GAASS,cAAA,SACTC,UAAQ,EACRC,MAAM,MACNC,IAAKC,IAAIC,gBAAgBd,KAG3BS,cAAA,SAEAA,cAAA,SAAOM,KAAK,OAAOC,SAAWC,IAAC,IAAAC,EAAA,OAAKjB,EAAuB,QAAfiB,EAACD,EAAEE,OAAOC,aAAK,IAAAF,OAAA,EAAdA,EAAgBG,KAAK,GAAG,IAErEZ,cAAA,MAAAD,SAAI,WAEJC,cAAA,UAAQa,QA9BSC,UAEnB9B,EAAO+B,GAAG,YAAa,iBAAkBC,oBAAUzB,UAG7CP,EAAOiC,IAAI,KAAM,WAAY,KAAM,MAAO,MAAO,MAAO,KAAM,MAAO,WAG3E,MAAMC,EAAOlC,EAAO+B,GAAG,WAAY,WAG7BI,EAAMf,IAAIC,gBAAgB,IAAIe,KAAK,CAACF,EAAKG,QAAS,CAAEf,KAAM,eAChEZ,EAAOyB,EAAI,EAkBqBpB,SAAC,YAE7BN,GAAOO,cAAA,OAAKG,IAAKV,EAAKS,MAAM,MAAMoB,IAAI,eAMxCtB,cAAA,KAAAD,SAAG,cAET,ECtDewB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EAAY,GAExB,ECHFS,IAASC,OACPlC,cAACmC,IAAMC,WAAU,CAAArC,SACfC,cAACb,EAAG,MAENkD,SAASC,eAAe,SAM1Bf,G","file":"static/js/main.04ef666f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// ffmpeg guide : https://ffmpegwasm.netlify.app/\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\nconst ffmpeg = createFFmpeg({ log: true });\n\nfunction App() {\n  const [ready, setReady] = useState(false);\n  const [video, setVideo] = useState();\n  const [gif, setGif] = useState();\n\n  // const load = async () => {\n  //   await ffmpeg.load();\n  //   setReady(true);\n  // }\n\n  const load = () => {\n   ffmpeg.load();\n    setReady(true);\n  }\n\n  useEffect(() => {\n    load();\n  }, [])\n\n  const convertToGif = async () => {\n    // Write the file to memory \n    ffmpeg.FS('writeFile', 'test.mp4', await fetchFile(video));\n\n    // Run the FFMpeg command\n    await ffmpeg.run('-i', 'test.mp4', '-t', '2.5', '-ss', '2.0', '-f', 'gif', 'out.gif');\n\n    // Read the result\n    const data = ffmpeg.FS('readFile', 'out.gif');\n\n    // Create a URL\n    const url = URL.createObjectURL(new Blob([data.buffer], { type: 'image/gif' }));\n    setGif(url)\n  }\n\n  return ready ? (\n    \n    <div className=\"App\">\n      { video && <video\n        controls\n        width=\"250\"\n        src={URL.createObjectURL(video)}>\n\n      </video>}\n      <br></br>\n\n      <input type=\"file\" onChange={(e) => setVideo(e.target.files?.item(0))} />\n\n      <h3>Result</h3>\n\n      <button onClick={convertToGif}>Convert</button>\n\n      { gif && <img src={gif} width=\"250\" alt=\"out.gif\"/>}\n\n    </div>\n  )\n    :\n    (\n      <p>Loading...</p>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}